scalar Time


type Account {
    id: String!
    name: String!
    orders: [Order!]!
}

type Product {
    id: String!
    name: String!
    price: Float!
    description: String!
}

type Order {
    id: String!
    products: [OrderedProduct!]!
    total_price: Float!
    createdAt: Time!
}

type OrderedProduct {
    id: String!
    name: String!
    description: String!
    price: Float!
    quantity: Int!
}

input PaginationInput {
    skip: Int!
    take: Int!
}

input AccountInput {
    name: String!
}

input ProductInput {
    name: String!
    price: Float!
    description: String!
}

input OrderedProductInput {
    id: String!
    quantity: Int!
}

input OrderInput {
    accountId: String!
    products: [OrderedProductInput!]!
}


type Mutation {
    createAccount(account: AccountInput!): Account
    createProduct(product: ProductInput!): Product
    createOrder(order: OrderInput!): Order
}


type Query {
    accounts(pagination: PaginationInput, id: String): [Account!]!
    products(pagination: PaginationInput, query: String, id: String): [Product!]!
    orders(pagination: PaginationInput, id: String): [Order!]!
}